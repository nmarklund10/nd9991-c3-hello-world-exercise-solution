# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  update_apt:
    description: update apt packages
    steps:
      - run: apt update
  install_tar_gzip:
    description: install tar and gzip in amazon/aws-cli docker image
    steps:
      - run:
          name: Install tar utility
          command: yum install -y tar gzip
  delete_stack:
    description: delete created stack on failure
    steps:
      - run:
          name: Install AWSCli on non amazon instances
          command: apt install -y awscli
          when: on_fail
      - run:
          name: Delete stack only if command before failed
          command: aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID}
          when: on_fail

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_gzip
      - run:
          name: Create Cloudformation Stack
          command: >
            aws cloudformation deploy
            --template-file template.yml
            --stack-name myStack-${CIRCLE_WORKFLOW_ID}
            --region us-east-1
      - run:
          name: Create inventory file
          command: echo "[all]" > inventory
      - run:
          name: Insert EC2 IP into inventory
          command: >
            aws ec2 describe-instances
            --query 'Reservations[*].Instances[*].PublicIpAddress'
            --filters "Name=tag-key,Values=aws:cloudformation:stack-name"
            "Name=tag-value,Values=myStack-${CIRCLE_WORKFLOW_ID}"
            --output text >> inventory
      - run:
          name: check if there is IP in inventory
          command: "[ $(cat inventory | wc -l) != '1' ]"
      - delete_stack
      - persist_to_workspace:
          root: .
          paths:
            - inventory

  configure_infrastructure:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: [$AWS_SSH_FINGERPRINT]
      - update_apt
      - run:
          name: Install Ansible
          command: apt install ansible -y
      - run:
          name: Run Playbook and Configure server
          command: ansible-playbook -i inventory my-main.yml
      - delete_stack

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - install_tar_gzip
      - attach_workspace:
          at: .
      - run:
          name: Install curl
          command: yum install -y curl
      - run:
          name: Smoke Test/ curl IP of website
          command: |
            IP=$(cat inventory | sed -n '2 p')
            curl http://$IP:3000
      - delete_stack

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_gzip
      - attach_workspace:
          at: .
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID}"
            - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID} --delete

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ./old_bucket_id.txt
      - persist_to_workspace:
          root: .
          paths:
            - inventory
            - old_bucket_id.txt

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`.
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack.
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_gzip
      - attach_workspace:
          at: .
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          command: |
            export OldBucketID=$(cat old_bucket_id.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

workflows:
  my_workflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure:
      #     requires: [create_infrastructure]
      # - smoke_test:
      #     requires: [configure_infrastructure]
      - create_and_deploy_front_end
      - get_last_deployment_id
      - promote_to_production:
          requires: [create_and_deploy_front_end]
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
