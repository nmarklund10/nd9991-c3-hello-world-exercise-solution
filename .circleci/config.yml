# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  install_tar_gzip:
    description: install tar and gzip in amazon/aws-cli docker image
    steps:
      - run:
          name: Install tar utility
          command: yum install -y tar gzip
  delete_stack:
    description: delete created stack on failure
    steps:
      - run:
          command: apk && apk add --update awscli
          when: on_fail
      - run:
          name: Delete stack only if command before failed
          command: aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID}
          when: on_fail

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_gzip
      - run:
          name: Create Cloudformation Stack
          command: >
            aws cloudformation deploy
            --template-file template.yml
            --stack-name myStack-${CIRCLE_WORKFLOW_ID}
            --region us-east-1
      - run:
          name: Create inventory file
          command: echo "[all]" > inventory
      - run:
          name: Insert EC2 IP into inventory
          command: >
            aws ec2 describe-instances
            --query 'Reservations[*].Instances[*].PublicIpAddress'
            --filters "Name=tag-key,Values=aws:cloudformation:stack-name"
            "Name=tag-value,Values=myStack-${CIRCLE_WORKFLOW_ID}"
            --output text >> inventory
      - run:
          name: check if there is IP in inventory
          command: "[ $(cat inventory | wc -l) != '1' ]"
      - delete_stack
      - persist_to_workspace:
          root: .
          paths:
            - inventory

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: [$AWS_SSH_FINGERPRINT]
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: ansible-playbook -i inventory my-main.yml
      - delete_stack

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacitydasfdsafsadfsadf.com/"
            # Test if website exists
            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi


workflows:
  my_workflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires: [create_infrastructure]
      # - smoke_test
