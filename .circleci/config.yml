# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  restore_variable:
    description: Save contents of file into environment variable
    parameters:
      filePath:
        type: string
      variableName:
        type: string
    steps:
      - run: export << parameters.variableName >>=$(cat << parameters.filePath >>)

default_working_dir: &default_working_dir
  working_directory: ./workspace


jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: >
            aws cloudformation deploy
            --template-file template.yml
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
            --region us-east-1
      - run:
          name: Save StackID to file
          command: echo "myStack-${CIRCLE_WORKFLOW_ID:0:5}" > stack_name.txt
      - persist_to_workspace:
          root: .
          paths:
            - stack_name.txt

  create_inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: >
            yum install -y tar gzip
      - attach_workspace:
          at: .
      - restore_variable:
          filePath: stack_name.txt
          variableName: STACK_NAME
      - run:
          name: human sanity check files
          command: ls
      - run:
          name: Human sanity check $STACK_NAME
          command: "echo $STACK_NAME"
      - run:
          name: Create inventory file
          command: echo "[all]" > inventory
      - run:
          name: Insert EC2 IP into inventory
          command: >
            aws ec2 describe-instances
            --query 'Reservations[*].Instances[*].PublicIpAddress'
            --filters "Name=tag-key,Values=aws:cloudformation:stack-name"
            "Name=tag-value,Values=$STACK_NAME"
            --output text >> inventory
      - run:
          name: check if there is IP in inventory
          command: "[ $(cat inventory | wc -l) != '1' ]"
      - run:
          name: Human sanity check on inventory
          command: cat inventory
      - run:
          name: delete aws stack if no ips in inventory
          command: aws cloudformation delete-stack --stack-name $STACK_NAME
          when: on_fail
      - persist_to_workspace:
          root: .
          paths:
            - inventory
            - stack_name.txt


      # - add_ssh_keys:
      #     fingerprints: [$AWS_SSH_FINGERPRINT]
      # - run:
      #     name: Install Ansible
      #     command: |
      #       apk add --update ansible
      # - run:
      #     name: Run Playbook and Configure server
      #     command: |
      #       ansible-playbook -i [inventory-file] [playbook-file]


workflows:
  my_workflow:
    jobs:
      - create_infrastructure
      - create_inventory:
          requires: [create_infrastructure]
